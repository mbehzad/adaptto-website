{"version":3,"file":"schedule-56ae7c12.js","sources":["../blocks/schedule/schedule.js"],"sourcesContent":["import { append } from '../../scripts/utils/dom.js';\nimport { getScheduleData } from '../../scripts/services/ScheduleData.js';\nimport { getSiteRootPath } from '../../scripts/utils/site.js';\nimport { formatDateFull, formatTime } from '../../scripts/utils/datetime.js';\n\nconst dayIdPattern = /^#day-(\\d)$/;\n\n/**\n * Gets the active day from current location hash.\n * @returns {number} Active day or undefined.\n */\nfunction getActiveDayFromHash() {\n  const dayIdMatch = window.location.hash.match(dayIdPattern);\n  if (dayIdMatch) {\n    return parseInt(dayIdMatch[1], 10);\n  }\n  return undefined;\n}\n\n/**\n * Displays schedule for given day.\n * @param {Element} block\n * @param {number} day\n */\nfunction displayDay(block, day) {\n  block.querySelectorAll('a.active').forEach((a) => a.classList.remove('active'));\n  block.querySelector(`a[rel=\"id-day-${day}\"]`)?.classList.add('active');\n  block.querySelectorAll('.tab-content.active').forEach((div) => div.classList.remove('active'));\n  block.querySelector(`#id-day-${day}`)?.classList.add('active');\n}\n\n/**\n * Build tab navigation links.\n * @typedef {import('../../scripts/services/ScheduleDay').default} ScheduleDay\n * @param {Element} element\n * @param {ScheduleDay[]} days\n * @param {number} activeDay\n */\nfunction buildTabNavigation(parent, days, activeDay) {\n  const tabNav = append(parent, 'div', 'tab-navigation');\n  days.forEach((day) => {\n    const link = append(tabNav, 'a');\n    link.href = `#day-${day.day}`;\n    link.rel = `id-day-${day.day}`;\n    link.textContent = `Day ${day.day}`;\n    if (day.day === activeDay) {\n      link.classList.add('active');\n    }\n\n    link.addEventListener('click', (e) => {\n      e.preventDefault();\n      displayDay(parent, day.day);\n      window.history.pushState(null, null, `#day-${day.day}`);\n    });\n  });\n}\n\n/**\n * Build schedule entry cells markup.\n * @typedef {import('../../scripts/services/ScheduleEntry').default} ScheduleEntry\n * @param {Element} tr\n * @param {ScheduleEntry} entry\n * @param {number} colSpan\n * @param {boolean} speakerColumn\n */\nfunction buildDayEntryCells(tr, entry, colSpan, speakerColumn) {\n  // time\n  const tdTime = append(tr, 'td', 'time');\n  append(tdTime, 'time').textContent = formatTime(entry.start);\n  tdTime.append(' - ');\n  append(tdTime, 'time').textContent = formatTime(entry.end);\n\n  // title & link\n  const tdTitle = append(tr, 'td', 'title');\n  if (colSpan > 1) {\n    tdTitle.setAttribute('colspan', colSpan);\n  }\n  if (entry.talkPath) {\n    const link = append(tdTitle, 'a');\n    link.href = entry.talkPath;\n    link.textContent = entry.title;\n  } else {\n    tdTitle.textContent = entry.title;\n  }\n\n  // speaker\n  if (speakerColumn) {\n    append(tr, 'td', 'speaker').textContent = entry.speakers.join(', ');\n  } else {\n    append(tdTitle, 'div', 'speaker').textContent = entry.speakers.join(', ');\n  }\n}\n\n/**\n * Build schedule entry row markup.\n * @typedef {import('../../scripts/services/ScheduleEntry').default} ScheduleEntry\n * @param {Element} tbody\n * @param {ScheduleEntry[]} entries Entries, possible multiple parallel\n * @param {number} trackCount Max. number of parallel tracks this day\n */\nfunction buildDayEntryRow(tbody, entries, trackCount) {\n  const tr = append(tbody, 'tr', entries[0].type);\n\n  entries.forEach((entry) => {\n    const colSpan = (trackCount - entries.length) * 2 + 1;\n    buildDayEntryCells(tr, entry, colSpan, trackCount === 1);\n  });\n}\n\n/**\n * Build schedule markup for day.\n * @typedef {import('../../scripts/services/ScheduleDay').default} ScheduleDay\n * @param {Element} parent\n * @param {ScheduleDay} day\n * @param {number} activeDay\n */\nfunction buildDaySchedule(parent, day, activeDay) {\n  const tabContent = append(parent, 'div', 'tab-content');\n  tabContent.id = `id-day-${day.day}`;\n  if (day.day === activeDay) {\n    tabContent.classList.add('active');\n  }\n\n  // parallelize entries with multiple tracks\n  let trackCount = 1;\n  const groupedEntries = [];\n  day.entries.forEach((entry) => {\n    if (entry.track > 0) {\n      if (entry.track === 1) {\n        const parallelEntries = [entry,\n          ...day.entries.filter((e) => e.start.getTime() === entry.start.getTime() && e.track > 1)];\n        if (parallelEntries.length > trackCount) {\n          trackCount = parallelEntries.length;\n        }\n        groupedEntries.push(parallelEntries);\n      }\n    } else {\n      groupedEntries.push([entry]);\n    }\n  });\n\n  // show date\n  const h4 = append(tabContent, 'h4');\n  const date = append(h4, 'date');\n  date.setAttribute('datetime', day.start.toISOString().substring(0, 10));\n  date.textContent = formatDateFull(day.start);\n\n  // table header\n  const table = append(tabContent, 'table');\n  const thead = append(table, 'thead');\n  const tr = append(thead, 'tr');\n  append(tr, 'th', 'time').textContent = 'Time';\n  append(tr, 'th', 'title').textContent = 'Topic';\n  if (trackCount === 1) {\n    append(tr, 'th', 'speaker').textContent = 'Speaker';\n  }\n\n  // table content\n  const tbody = append(table, 'tbody');\n  groupedEntries.forEach((entries) => buildDayEntryRow(tbody, entries, trackCount));\n}\n\n/**\n * Builds schedule based on schedule-data sheet.\n * @param {Element} block\n */\nexport default async function decorate(block) {\n  block.textContent = '';\n\n  // load schedule data\n  const siteRoot = getSiteRootPath(document.location.pathname);\n  const scheduleData = await getScheduleData(`${siteRoot}schedule-data.json`);\n\n  // detect active day\n  let activeDay = getActiveDayFromHash();\n  if (!activeDay) {\n    activeDay = 1;\n    window.history.replaceState(null, null, `#day-${activeDay}`);\n  }\n\n  // react to stage changes via hash\n  window.addEventListener('hashchange', () => {\n    const day = getActiveDayFromHash();\n    if (day) {\n      displayDay(block, day);\n    }\n  });\n\n  // render schedule\n  const days = scheduleData.getDays();\n  if (days.length > 0) {\n    buildTabNavigation(block, days, activeDay);\n    days.forEach((day) => buildDaySchedule(block, day, activeDay));\n  }\n}\n"],"names":["dayIdPattern","getActiveDayFromHash","dayIdMatch","window","location","hash","match","parseInt","displayDay","block","day","querySelectorAll","forEach","a","classList","remove","querySelector","add","div","buildDayEntryRow","tbody","entries","trackCount","tr","append","type","entry","colSpan","length","speakerColumn","tdTime","textContent","formatTime","start","end","tdTitle","setAttribute","talkPath","link","href","title","speakers","join","buildDayEntryCells","async","decorate","siteRoot","getSiteRootPath","document","pathname","scheduleData","getScheduleData","activeDay","history","replaceState","addEventListener","days","getDays","parent","tabNav","rel","e","preventDefault","pushState","buildTabNavigation","tabContent","id","groupedEntries","track","parallelEntries","filter","getTime","push","h4","date","toISOString","substring","formatDateFull","table","thead","buildDaySchedule"],"mappings":"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"}