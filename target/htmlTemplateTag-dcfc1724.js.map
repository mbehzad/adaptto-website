{"version":3,"file":"htmlTemplateTag-dcfc1724.js","sources":["../scripts/utils/htmlTemplateTag.js"],"sourcesContent":["// derived from https://github.com/AntonioVdlC/html-template-tag\n/* eslint-disable no-param-reassign */\n\n// List of the characters we want to escape and their HTML escaped version\nconst chars = {\n  '&': '&amp;',\n  '>': '&gt;',\n  '<': '&lt;',\n  '\"': '&quot;',\n  '\\'': '&#39;',\n  '`': '&#96;',\n};\n\n// Dynamically create a RegExp from the `chars` object\nconst re = new RegExp(Object.keys(chars).join('|'), 'g');\n\n/**\n * @param {string} str String to escape\n * @returns {string} Escaped string\n */\nfunction escape(str) {\n  return String(str).replace(re, (match) => chars[match]);\n}\n\n/**\n * Escapes template literals for HTML.\n * @param {TemplateStringsArray} literals\n * @param {string[]|string[][]} substs\n * @returns {string} Escaped result string\n */\nexport default function html(literals, ...substs) {\n  return literals.raw.reduce((acc, lit, i) => {\n    let subst = substs[i - 1];\n    if (Array.isArray(subst)) {\n      subst = subst.join('');\n    } else if (literals.raw[i - 1] && literals.raw[i - 1].endsWith('$')) {\n      // If the interpolation is preceded by a dollar sign,\n      // substitution is considered safe and will not be escaped\n      acc = acc.slice(0, -1);\n    } else {\n      subst = escape(subst);\n    }\n    return acc + subst + lit;\n  });\n}\n"],"names":["chars","re","RegExp","Object","keys","join","html","literals","substs","raw","reduce","acc","lit","i","subst","Array","isArray","endsWith","slice","String","replace","match"],"mappings":"AAIA,MAAMA,EAAQ,CACZ,IAAK,QACL,IAAK,OACL,IAAK,OACL,IAAK,SACL,IAAM,QACN,IAAK,SAIDC,EAAK,IAAIC,OAAOC,OAAOC,KAAKJ,GAAOK,KAAK,KAAM,KAgBrC,SAASC,EAAKC,KAAaC,GACxC,OAAOD,EAASE,IAAIC,QAAO,CAACC,EAAKC,EAAKC,KACpC,IAAIC,EAAQN,EAAOK,EAAI,GAUvB,OATIE,MAAMC,QAAQF,GAChBA,EAAQA,EAAMT,KAAK,IACVE,EAASE,IAAII,EAAI,IAAMN,EAASE,IAAII,EAAI,GAAGI,SAAS,KAG7DN,EAAMA,EAAIO,MAAM,GAAI,GAEpBJ,EAnBGK,OAmBYL,GAnBAM,QAAQnB,GAAKoB,GAAUrB,EAAMqB,KAqBvCV,EAAMG,EAAQF,CAAG,GAE5B"}