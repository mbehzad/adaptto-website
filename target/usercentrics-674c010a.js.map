{"version":3,"file":"usercentrics-674c010a.js","sources":["../scripts/utils/usercentrics.js"],"sourcesContent":["/**\n * Integration of Usercentrics Consent Management.\n * Based on Web CMP v2, but without Smart Data Protector.\n * Web CMP v2 is still a very big script (~180k), so special treatment is applied\n * to be performant. If a block is rendered before UC is actually initialized\n * a loading spinner is displayed. Once loaded, the spinner is replaced with\n * the block content, or a consent dialog message.\n * Via the decorateWithConsent all blocks depending on consent are registering\n * themselves with a decorate method and the block parent element. If consent\n * status changes (event triggered), the block is re-rendered automatically.\n */\nimport html from './htmlTemplateTag.js';\n\nconst settingsId = 'o544Hdz9e';\nconst serviceIds = {\n  youtube: 'BJz7qNsdj-7',\n  googleMaps: 'S1pcEj_jZX',\n  hubspot: 'r1Fhc4iOoWX',\n  pretix: '4gBcUVFgPUn-Zs',\n};\n\nlet enabled = true;\nlet isInitialized = false;\nconst lastServiceConsentStatus = new Map();\nconst serviceElementDecorators = new Map();\n\n/**\n * Checks if user has given consent to given service\n * @param {string} service Service name\n * @returns {boolean} true if consent is given\n */\nfunction isConsentGiven(service) {\n  if (!window.UC_UI) {\n    return false;\n  }\n  const serviceId = serviceIds[service];\n  return window.UC_UI.getServicesBaseInfo()\n    .find((item) => item.id === serviceId && item.consent?.status) !== undefined;\n}\n\n/**\n * Get full service information for consent dialog message.\n * @param {string} service Service name\n * @return {Promise} Service info\n */\nasync function getServiceInfo(service) {\n  if (!window.UC_UI) {\n    return undefined;\n  }\n  const serviceId = serviceIds[service];\n  const fullInfos = await window.UC_UI.getServicesFullInfo();\n  return fullInfos.find((item) => item.id === serviceId);\n}\n\n/**\n * Renders the consent dialog message if consent for a service is not given.\n * @param {string} service Service name\n * @param {Element} parent Parent element\n */\nasync function decorateConsentDialogMessage(service, parent) {\n  const serviceInfo = await getServiceInfo(service) || { name: service, description: '' };\n  parent.innerHTML = html`\n  <div class=\"usercentrics-consent-dialog usercentrics-placeholder\">\n    <h3>We need your consent to load the ${serviceInfo.name} service!</h3>\n    <p>${serviceInfo.description}</p>\n    <button class=\"more-info\">More Information</button>\n    <button class=\"accept\">Accept</button>\n  </div>\n  `;\n  parent.querySelector('button.more-info').addEventListener('click', () => {\n    window.UC_UI.showSecondLayer(serviceInfo.id);\n  });\n  parent.querySelector('button.accept').addEventListener('click', () => {\n    window.UC_UI.acceptService(serviceInfo.id);\n  });\n}\n\n/**\n * Checks current consent status and re-Decorates block either with\n * actual content, or with consent message.\n * If Usercentrics is not initialized yet, render a loading spinner.\n * @param {string} service Service\n * @param {Element} parent Parent element\n * @param {function} decorator Decorator method\n */\nfunction decorateDependingOnConsent(service, parent, decorator) {\n  parent.innerHTML = '';\n  if (isConsentGiven(service)) {\n    decorator(parent);\n  } else if (isInitialized) {\n    decorateConsentDialogMessage(service, parent);\n  } else {\n    parent.innerHTML = html`<img class=\"usercentrics-loading-spinner usercentrics-placeholder\" src=\"/resources/img/spinner.svg\" alt=\"\"/>`;\n  }\n}\n\n/**\n * Updates the consent status for all configured services.\n * Detects actual changes in consent status and triggers a re-display of the affected block(s).\n */\nfunction updateConsentStatus() {\n  Object.keys(serviceIds).forEach((service) => {\n    const currentStatus = isConsentGiven(service);\n    const lastStatus = lastServiceConsentStatus.get(service);\n    if (currentStatus !== lastStatus) {\n      // change in consent status detected - re-decorate all affected blocks\n      const items = serviceElementDecorators.get(service) || [];\n      items.forEach((item) => {\n        decorateDependingOnConsent(service, item.parent, item.decorator);\n      });\n    }\n    lastServiceConsentStatus.set(service, currentStatus);\n  });\n}\n\n/**\n * Decorates block with given decorator method when consent is given.\n * If consent is not given, a dialog message is displayed to ask for consent.\n * If consent is given at any time, the decorator methods is executed.\n * @param {string} service Service name\n * @param {Element} parent Parent element (content is removed automatically)\n * @param {function} decorator Method to render the actual block content\n */\nexport function decorateWithConsent(service, parent, decorator) {\n  if (!enabled) {\n    decorator(parent);\n    return;\n  }\n  // save decorator for later use\n  const items = serviceElementDecorators.get(service) || [];\n  items.push({ parent, decorator });\n  serviceElementDecorators.set(service, items);\n  // check current consent status\n  decorateDependingOnConsent(service, parent, decorator);\n}\n\n/**\n * Activates Usercentrics Consent Management (if enabled).\n * @param {Element} head HTML Head\n */\nexport function decorateConsentManagement(head) {\n  if (!enabled) {\n    return;\n  }\n\n  window.addEventListener('UC_UI_INITIALIZED', () => {\n    isInitialized = true;\n    updateConsentStatus();\n  });\n  window.addEventListener('UC_UI_CMP_EVENT', () => {\n    if (isInitialized) {\n      updateConsentStatus();\n    }\n  });\n\n  // Usercentrics Web CMP v2\n  const script = document.createElement('script');\n  script.id = 'usercentrics-cmp';\n  script.dataset.settingsId = settingsId;\n  script.src = 'https://app.Usercentrics.eu/browser-ui/latest/loader.js';\n  head.append(script);\n}\n\n/**\n * Allows to explicitly disable consent management (for unit tests).\n * @param {boolean} isEnabled Enabled\n */\nexport function setConsentManagementEnabled(isEnabled) {\n  enabled = isEnabled;\n}\n"],"names":["settingsId","serviceIds","youtube","googleMaps","hubspot","pretix","isInitialized","lastServiceConsentStatus","Map","serviceElementDecorators","isConsentGiven","service","window","UC_UI","serviceId","undefined","getServicesBaseInfo","find","item","id","consent","status","async","decorateConsentDialogMessage","parent","serviceInfo","getServicesFullInfo","getServiceInfo","name","description","innerHTML","html","querySelector","addEventListener","showSecondLayer","acceptService","decorateDependingOnConsent","decorator","updateConsentStatus","Object","keys","forEach","currentStatus","get","set","decorateWithConsent","items","push","decorateConsentManagement","head","script","document","createElement","dataset","src","append"],"mappings":"kDAaA,MAAMA,EAAa,YACbC,EAAa,CACjBC,QAAS,cACTC,WAAY,aACZC,QAAS,cACTC,OAAQ,kBAIV,IAAIC,GAAgB,EACpB,MAAMC,EAA2B,IAAIC,IAC/BC,EAA2B,IAAID,IAOrC,SAASE,EAAeC,GACtB,IAAKC,OAAOC,MACV,OAAO,EAET,MAAMC,EAAYb,EAAWU,GAC7B,YACqEI,IAD9DH,OAAOC,MAAMG,sBACjBC,MAAMC,GAASA,EAAKC,KAAOL,GAAaI,EAAKE,SAASC,QAC3D,CAqBAC,eAAeC,EAA6BZ,EAASa,GACnD,MAAMC,QAfRH,eAA8BX,GAC5B,IAAKC,OAAOC,MACV,OAEF,MAAMC,EAAYb,EAAWU,GAE7B,aADwBC,OAAOC,MAAMa,uBACpBT,MAAMC,GAASA,EAAKC,KAAOL,GAC9C,CAQ4Ba,CAAehB,IAAY,CAAEiB,KAAMjB,EAASkB,YAAa,IACnFL,EAAOM,UAAYC,CAAI;;2CAEkBN,EAAYG;SAC9CH,EAAYI;;;;IAKnBL,EAAOQ,cAAc,oBAAoBC,iBAAiB,SAAS,KACjErB,OAAOC,MAAMqB,gBAAgBT,EAAYN,GAAG,IAE9CK,EAAOQ,cAAc,iBAAiBC,iBAAiB,SAAS,KAC9DrB,OAAOC,MAAMsB,cAAcV,EAAYN,GAAG,GAE9C,CAUA,SAASiB,EAA2BzB,EAASa,EAAQa,GACnDb,EAAOM,UAAY,GACfpB,EAAeC,GACjB0B,EAAUb,GACDlB,EACTiB,EAA6BZ,EAASa,GAEtCA,EAAOM,UAAYC,CAAI,8GAE3B,CAMA,SAASO,IACPC,OAAOC,KAAKvC,GAAYwC,SAAS9B,IAC/B,MAAM+B,EAAgBhC,EAAeC,GAErC,GAAI+B,IADenC,EAAyBoC,IAAIhC,GACd,EAElBF,EAAyBkC,IAAIhC,IAAY,IACjD8B,SAASvB,IACbkB,EAA2BzB,EAASO,EAAKM,OAAQN,EAAKmB,UAAU,GAEnE,CACD9B,EAAyBqC,IAAIjC,EAAS+B,EAAc,GAExD,CAUO,SAASG,EAAoBlC,EAASa,EAAQa,GAMnD,MAAMS,EAAQrC,EAAyBkC,IAAIhC,IAAY,GACvDmC,EAAMC,KAAK,CAAEvB,SAAQa,cACrB5B,EAAyBmC,IAAIjC,EAASmC,GAEtCV,EAA2BzB,EAASa,EAAQa,EAC9C,CAMO,SAASW,EAA0BC,GAKxCrC,OAAOqB,iBAAiB,qBAAqB,KAC3C3B,GAAgB,EAChBgC,GAAqB,IAEvB1B,OAAOqB,iBAAiB,mBAAmB,KACrC3B,GACFgC,GACD,IAIH,MAAMY,EAASC,SAASC,cAAc,UACtCF,EAAO/B,GAAK,mBACZ+B,EAAOG,QAAQrD,WAAaA,EAC5BkD,EAAOI,IAAM,0DACbL,EAAKM,OAAOL,EACd"}