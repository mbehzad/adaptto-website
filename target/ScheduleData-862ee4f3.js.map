{"version":3,"file":"ScheduleData-862ee4f3.js","sources":["../scripts/utils/datetime.js","../scripts/services/ScheduleDay.js","../scripts/services/ScheduleEntry.js","../scripts/services/ScheduleData.js"],"sourcesContent":["const locale = 'en-GB';\nconst timeOptions = { hour: '2-digit', minute: '2-digit', timeZone: 'UTC' };\nconst dateFullOptions = { dateStyle: 'full' };\n\n/**\n * Format date in full format.\n * Example: Monday, 27 September 2021\n * @param {Date} date Date value\n * @returns {string} Formatted date\n */\nexport function formatDateFull(date) {\n  return date.toLocaleDateString(locale, dateFullOptions);\n}\n\n/**\n * Format time.\n * Example: 10:30.\n * @param {Date} date Date/time value\n * @returns {string} Formatted time\n */\nexport function formatTime(date) {\n  return date.toLocaleTimeString(locale, timeOptions);\n}\n\n/**\n * Converts a number counting days since 1/1/1900 as used in Excel/Google Sheets to a date value.\n * @param {float} value Float date value from Excel/Google Sheets\n * @returns {Date} Date value\n */\nexport function convertSheetDateValue(value) {\n  const date = new Date(0);\n  date.setUTCMilliseconds(Math.round((value - 25569) * 86400 * 1000));\n  return date;\n}\n","/**\n * Describes a schedule day.\n */\nexport default class ScheduleDay {\n  /** @type {number} Day number */\n  day;\n\n  /** @type {Date} Start time */\n  start;\n\n  /** @type {Date} End time */\n  end;\n\n  /**\n   * @typedef {import('./ScheduleEntry').default} ScheduleEntry\n   * @type {ScheduleEntry[]} Schedule entries\n   */\n  entries;\n}\n","/**\n * Describes a schedule entry.\n */\nexport default class ScheduleEntry {\n  /** @type {number} Day number */\n  day;\n\n  /** @type {number} Track number */\n  track;\n\n  /** @type {Date} Start time */\n  start;\n\n  /** @type {Date} End time */\n  end;\n\n  /** @type {string} Talk/Entry title */\n  title;\n\n  /** @type {number} Duration of talk (without FAQ) in minutes */\n  duration;\n\n  /** @type {number} Duration of FAQ in minutes */\n  durationFAQ;\n\n  /** @type {string} Entry type: talk, break, other */\n  type;\n\n  /** @type {string[]} Speaker names */\n  speakers;\n\n  /** @type {string} Path to talk detail page */\n  talkPath;\n}\n","import { convertSheetDateValue } from '../utils/datetime.js';\nimport { getFetchCacheOptions } from '../utils/fetch.js';\nimport { parseCSVArray, removeTitleSuffix } from '../utils/metadata.js';\nimport { getPathName, isUrlOrPath } from '../utils/path.js';\nimport { getQueryIndex } from './QueryIndex.js';\nimport ScheduleDay from './ScheduleDay.js';\nimport ScheduleEntry from './ScheduleEntry.js';\n\nconst validEntryTypes = ['day', 'talk', 'break', 'other'];\n\n/**\n * Calculate scheduling data bases on yearly schedule-data.json and query-index.json.\n */\nexport default class ScheduleData {\n  /** @type {ScheduleDay[]} */\n  days;\n\n  /**\n   * @param {ScheduleDay[]} days Schedule days\n   */\n  constructor(days) {\n    this.days = days;\n  }\n\n  /**\n   * @returns {ScheduleDay[]} All days described in schedule\n   */\n  getDays() {\n    return this.days;\n  }\n\n  /**\n   * @param {string} path Path to talk detail page\n   * @returns {ScheduleEntry}\n   */\n  getTalkEntry(path) {\n    return this.days.flatMap((day) => day.entries)\n      .find((entry) => entry.talkPath === path);\n  }\n}\n\n/**\n * Resolve talk detail reference to query index item.\n * @typedef {import('./QueryIndex').default} QueryIndex\n * @typedef {import('./QueryIndexItem').default} QueryIndexItem\n * @param {string} talkDetailRef Title from schedule sheet which should point to a talk detail page.\n *   This may be only a document name\n * @param {number} year Current year\n * @param {QueryIndex} queryIndex\n * @returns {QueryIndexItem} Query index item or undefined\n */\nfunction getTalkQueryIndexItem(talkDetailRef, year, queryIndex) {\n  let path;\n  if (isUrlOrPath(talkDetailRef)) {\n    path = getPathName(talkDetailRef);\n  } else {\n    path = `/${year}/schedule/${talkDetailRef}`;\n  }\n  return queryIndex.getItem(path);\n}\n\n/**\n * Transforms schedule data item to schedule entry.\n * @typedef {import('./QueryIndex').default} QueryIndex\n * @param {object} item\n * @param {QueryIndex} queryIndex\n * @returns {ScheduleEntry}\n */\nfunction toEntry(item, queryIndex) {\n  const day = parseInt(item.Day, 10) || 0;\n  const track = parseInt(item.Track, 10) || 0;\n  const startTime = parseFloat(item.Start) || 0;\n  const endTime = parseFloat(item.End) || 0;\n  let title = item.Entry;\n  const duration = parseInt(item.Duration, 10) || 0;\n  const durationFAQ = parseInt(item.FAQ, 10) || 0;\n  const type = item.Type;\n  let speakers = parseCSVArray(item.Speakers);\n\n  // validate entry\n  if (day === 0 || startTime === 0 || endTime === 0 || !title || duration === 0\n    || !validEntryTypes.includes(type)) {\n    return undefined;\n  }\n\n  // convert dates\n  const start = convertSheetDateValue(startTime);\n  const end = convertSheetDateValue(endTime);\n\n  // resolve talk path and title, speakers from query index\n  let talkPath;\n  if (type === 'talk') {\n    const indexItem = getTalkQueryIndexItem(title, start.getFullYear(), queryIndex);\n    if (!indexItem) {\n      return undefined;\n    }\n    talkPath = indexItem.path;\n    title = removeTitleSuffix(indexItem.title);\n    if (speakers.length === 0) {\n      speakers = indexItem.getSpeakers();\n    }\n  }\n\n  return Object.assign(new ScheduleEntry(), {\n    day,\n    track,\n    start,\n    end,\n    title,\n    duration,\n    durationFAQ,\n    type,\n    speakers,\n    talkPath,\n  });\n}\n\n/**\n * Transforms schedule data to days and entries.\n * @typedef {import('./QueryIndex').default} QueryIndex\n * @param {object[]} scheduleData\n * @param {QueryIndex} queryIndex\n * @returns {ScheduleDay[]}\n */\nfunction toDays(scheduleData, queryIndex) {\n  // transform and collect entries per day (ignore 'day' entries)\n  const entriesPerDay = new Map();\n  scheduleData.forEach((item) => {\n    const entry = toEntry(item, queryIndex);\n    if (entry && entry.type !== 'day') {\n      let entries = entriesPerDay.get(entry.day);\n      if (!entries) {\n        entries = [];\n        entriesPerDay.set(entry.day, entries);\n      }\n      entries.push(entry);\n    }\n  });\n\n  // build day objects\n  return Array.from(entriesPerDay.values())\n    .map((entries) => Object.assign(new ScheduleDay(), {\n      day: entries[0].day,\n      start: entries.reduce((min, e) => (e.start < min ? e.start : min), entries[0].start),\n      end: entries.reduce((max, e) => (e.end > max ? e.end : max), entries[0].start),\n      entries,\n    }));\n}\n\n/**\n * @param {string} scheduleDataUrl Url to schedule-data.json\n */\nexport async function getScheduleData(scheduleDataUrl) {\n  let scheduleData;\n  const resp = await fetch(scheduleDataUrl, getFetchCacheOptions());\n  if (resp.ok) {\n    const json = await resp.json();\n    scheduleData = json.data;\n  }\n  const queryIndex = await getQueryIndex();\n  const days = toDays(scheduleData || [], queryIndex);\n  return new ScheduleData(days);\n}\n"],"names":["locale","timeOptions","hour","minute","timeZone","dateFullOptions","dateStyle","formatDateFull","date","toLocaleDateString","formatTime","toLocaleTimeString","convertSheetDateValue","value","Date","setUTCMilliseconds","Math","round","ScheduleDay","day","start","end","entries","ScheduleEntry","track","title","duration","durationFAQ","type","speakers","talkPath","validEntryTypes","ScheduleData","days","constructor","this","getDays","getTalkEntry","path","flatMap","find","entry","toEntry","item","queryIndex","parseInt","Day","Track","startTime","parseFloat","Start","endTime","End","Entry","Duration","FAQ","Type","parseCSVArray","Speakers","includes","indexItem","talkDetailRef","year","isUrlOrPath","getPathName","getItem","getTalkQueryIndexItem","getFullYear","removeTitleSuffix","length","getSpeakers","Object","assign","async","getScheduleData","scheduleDataUrl","scheduleData","resp","fetch","getFetchCacheOptions","ok","json","data","entriesPerDay","Map","forEach","get","set","push","Array","from","values","map","reduce","min","e","max","toDays","getQueryIndex"],"mappings":"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"}